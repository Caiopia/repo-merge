//
//  BugsnagEvent.h
//  Bugsnag
//
//  Created by Simon Maynard on 11/26/14.
//
//

#import <Foundation/Foundation.h>

@class BugsnagConfiguration;
@class BugsnagHandledState;
@class BugsnagSession;
@class BugsnagBreadcrumb;

typedef NS_ENUM(NSUInteger, BSGSeverity) {
    BSGSeverityError,
    BSGSeverityWarning,
    BSGSeverityInfo,
};

@interface BugsnagEvent : NSObject

// -----------------------------------------------------------------------------
// MARK: - Initialisation
// -----------------------------------------------------------------------------

/**
 *  Create a new crash report from a JSON crash report generated by
 * BugsnagCrashSentry
 *
 *  @param report a BugsnagCrashSentry JSON report
 *  @param metadata additional report info encoded as a string
 *
 *  @return a Bugsnag crash report
 */
- (instancetype _Nonnull)initWithKSReport:(NSDictionary *_Nonnull)report
                             fileMetadata:(NSString *_Nonnull)metadata
                             __deprecated_msg("Use initWithKSReport: instead.");

/**
 *  Create a new crash report from a JSON crash report generated by
 * BugsnagCrashSentry
 *
 *  @param report a BugsnagCrashSentry JSON report
 *
 *  @return a Bugsnag crash report
 */
- (instancetype _Nonnull)initWithKSReport:(NSDictionary *_Nonnull)report;

/**
 *  Create a basic crash report from raw parts.
 *
 *  Assumes that the exception is handled.
 *
 *  @param name      The name of the exception
 *  @param message   The reason or message from the exception
 *  @param config    Bugsnag configuration
 *  @param metadata  additional data to attach to the report
 *  @param handledState  the handled state of the error
 *
 *  @return a Bugsnag crash report
 */
- (instancetype _Nonnull)
initWithErrorName:(NSString *_Nonnull)name
     errorMessage:(NSString *_Nonnull)message
    configuration:(BugsnagConfiguration *_Nonnull)config
         metadata:(NSDictionary *_Nonnull)metadata
     handledState:(BugsnagHandledState *_Nonnull)handledState
          session:(BugsnagSession *_Nullable)session;

/**
 *  Prepend a custom stacktrace with a provided type to the crash report
 */
- (void)attachCustomStacktrace:(NSArray *_Nonnull)frames
                      withType:(NSString *_Nonnull)type;

// -----------------------------------------------------------------------------
// MARK: - Metadata
// -----------------------------------------------------------------------------

/**
 * Add metadata to a report to a tab. If the tab does not exist, it will be
 * added.
 *
 * @param metadata The key/value pairs to add
 * @param sectionName The name of the report section
 */
- (void)addMetadata:(NSDictionary *_Nonnull)metadata
          toSection:(NSString *_Nonnull)sectionName;

/**
 * Add or remove a value from report metadata. If value is nil, the existing value
 * will be removed.
 *
 * @param key The key name
 * @param value The value to set
 * @param sectionName The name of the metadata section
 */
- (void)addMetadata:(id _Nullable)value
            withKey:(NSString *_Nonnull)key
          toSection:(NSString *_Nonnull)sectionName;

/**
 * Return a piece of metadata in a named section if it exists, or nil.
 *
 * @param sectionName The name of the metadata section
 * @param key The key
 * @returns An arbitrary object if it exists for the key or nil.
 */
- (id _Nullable)getMetadataFromSection:(NSString *_Nonnull)sectionName
                               withKey:(NSString *_Nullable)key;

/**
 * Return a named metadata section if it exists, or nil.
 *
 * @param sectionName The name of the metadata section
 * @returns A dictionary of metadata if the section exists, or nil.
 */
- (NSDictionary *_Nullable)getMetadataFromSection:(NSString *_Nonnull)sectionName;

/**
 * Remove a named metadata section, if it exists.
 *
 * @param sectionName The name of the section to remove
 */
- (void)clearMetadataFromSection:(NSString *_Nonnull)sectionName;

/**
 * Remove a named metadata value if the key exists in the named section.
 *
 * @param sectionName The name of the section to remove
 * @param key The key to remove
 */
- (void)clearMetadataFromSection:(NSString *_Nonnull)sectionName
                       withKey:(NSString *_Nonnull)key;

// -----------------------------------------------------------------------------
// MARK: - Properties
// -----------------------------------------------------------------------------

/**
 *  A loose representation of what was happening in the application at the time
 *  of the event
 */
@property(readwrite, copy, nullable) NSString *context;
/**
 *  The severity of the error generating the report
 */
@property(readwrite) BSGSeverity severity;
/**
 *  The release stage of the application
 */
@property(readwrite, copy, nullable) NSString *releaseStage;
/**
 *  The class of the error generating the report
 */
@property(readwrite, copy, nonnull) NSString *errorClass;
/**
 *  The message of or reason for the error generating the report
 */
@property(readwrite, copy, nullable) NSString *errorMessage;
/**
 *  Customized hash for grouping this report with other errors
 */
@property(readwrite, copy, nullable) NSString *groupingHash;
/**
 *  Breadcrumbs from user events leading up to the error
 */
@property(readwrite, copy, nullable) NSArray <BugsnagBreadcrumb *>*breadcrumbs;
/**
 *  Further information attached to an error report, where each top level key
 *  generates a section on bugsnag, displaying key/value pairs
 */
@property(readwrite, copy, nonnull) NSDictionary *metadata;

/**
 * A per-event override for the apiKey.
 * - Reads default to the BugsnagConfiguration apiKey value unless explicitly set.
 * - Writes are not persisted to BugsnagConfiguration.
 */
@property(readwrite, copy, nonnull) NSString *apiKey;
/**
 *  Device information such as OS name and version
 */
@property(readwrite, copy, nullable) NSDictionary *device;
/**
 *  Device state such as memory allocation at crash time
 */
@property(readwrite, copy, nullable) NSDictionary *deviceState;
/**
 *  App information such as the name, version, and bundle ID
 */
@property(readwrite, copy, nullable) NSDictionary *app;
/**
 *  Device state such as oreground status and run duration
 */
@property(readwrite, copy, nullable) NSDictionary *appState;

/**
 * Whether the event was a crash (i.e. unhandled) or handled error in which the system
 * continued running.
 */
@property(readonly) BOOL unhandled;

@end
