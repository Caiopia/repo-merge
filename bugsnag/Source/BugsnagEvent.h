//
//  BugsnagEvent.h
//  Bugsnag
//
//  Created by Simon Maynard on 11/26/14.
//
//

#import <Foundation/Foundation.h>
#import "BugsnagMetadataStore.h"

@class BugsnagConfiguration;
@class BugsnagHandledState;
@class BugsnagSession;
@class BugsnagBreadcrumb;
@class BugsnagMetadata;

typedef NS_ENUM(NSUInteger, BSGSeverity) {
    BSGSeverityError,
    BSGSeverityWarning,
    BSGSeverityInfo,
};

@interface BugsnagEvent : NSObject <BugsnagMetadataStore>

// -----------------------------------------------------------------------------
// MARK: - Initialisation
// -----------------------------------------------------------------------------

/**
 *  Create a new crash report from a JSON crash report generated by
 * BugsnagCrashSentry
 *
 *  @param report a BugsnagCrashSentry JSON report
 *  @param metadata additional report info encoded as a string
 *
 *  @return a Bugsnag crash report
 */
- (instancetype _Nonnull)initWithKSReport:(NSDictionary *_Nonnull)report
                             fileMetadata:(NSString *_Nonnull)metadata
                             __deprecated_msg("Use initWithKSReport: instead.");

/**
 *  Create a new crash report from a JSON crash report generated by
 * BugsnagCrashSentry
 *
 *  @param report a BugsnagCrashSentry JSON report
 *
 *  @return a Bugsnag crash report
 */
- (instancetype _Nonnull)initWithKSReport:(NSDictionary *_Nonnull)report;

/**
 *  Create a basic crash report from raw parts.
 *
 *  Assumes that the exception is handled.
 *
 *  @param name      The name of the exception
 *  @param message   The reason or message from the exception
 *  @param config    Bugsnag configuration
 *  @param metadata  additional data to attach to the report
 *  @param handledState  the handled state of the error
 *
 *  @return a Bugsnag crash report
 */
- (instancetype _Nonnull)
initWithErrorName:(NSString *_Nonnull)name
     errorMessage:(NSString *_Nonnull)message
    configuration:(BugsnagConfiguration *_Nonnull)config
         metadata:(BugsnagMetadata *_Nullable)metadata
     handledState:(BugsnagHandledState *_Nonnull)handledState
          session:(BugsnagSession *_Nullable)session;

/**
 *  Prepend a custom stacktrace with a provided type to the crash report
 */
- (void)attachCustomStacktrace:(NSArray *_Nonnull)frames
                      withType:(NSString *_Nonnull)type;

// -----------------------------------------------------------------------------
// MARK: - Properties
// -----------------------------------------------------------------------------

/**
 *  A loose representation of what was happening in the application at the time
 *  of the event
 */
@property(readwrite, copy, nullable) NSString *context;
/**
 *  The severity of the error generating the report
 */
@property(readwrite) BSGSeverity severity;
/**
 *  The release stage of the application
 */
@property(readwrite, copy, nullable) NSString *releaseStage;
/**
 *  The class of the error generating the report
 */
@property(readwrite, copy, nonnull) NSString *errorClass;
/**
 *  The message of or reason for the error generating the report
 */
@property(readwrite, copy, nullable) NSString *errorMessage;
/**
 *  Customized hash for grouping this report with other errors
 */
@property(readwrite, copy, nullable) NSString *groupingHash;
/**
 *  Breadcrumbs from user events leading up to the error
 */
@property(readwrite, copy, nullable) NSArray <BugsnagBreadcrumb *>*breadcrumbs;

/**
 * A per-event override for the apiKey.
 * - Reads default to the BugsnagConfiguration apiKey value unless explicitly set.
 * - Writes are not persisted to BugsnagConfiguration.
 */
@property(readwrite, copy, nonnull) NSString *apiKey;
/**
 *  Device information such as OS name and version
 */
@property(readwrite, copy, nullable) NSDictionary *device;
/**
 *  Device state such as memory allocation at crash time
 */
@property(readwrite, copy, nullable) NSDictionary *deviceState;
/**
 *  App information such as the name, version, and bundle ID
 */
@property(readwrite, copy, nullable) NSDictionary *app;
/**
 *  Device state such as oreground status and run duration
 */
@property(readwrite, copy, nullable) NSDictionary *appState;

/**
 * Whether the event was a crash (i.e. unhandled) or handled error in which the system
 * continued running.
 */
@property(readonly) BOOL unhandled;

@end

